kmObs$iter
kmObj$iter
plot(x, y, col = kmObj$cluster, pch 19 = lwd = 2)
plot(x, y, col = kmObj$cluster, pch = 19 = lwd = 2)
plot(x, y, col = kmObj$cluster, pch = 19, lwd = 2)
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, kmeans(dataGrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame), kmeans(dataGrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame), kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", set = TRUE)
source("addPatt.R", local set = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2
svd2$d
svd2$v[,2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[ ,1] $ svd1$d[1]) %*% t(svd1$v[ ,1])
a1 <- (svd1$u[ ,1] * svd1$d[1]) %*% t(svd1$v[ ,1])
myImage(a1)
a2 <- svd1$u[ ,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[ ,1:2])
myImage(a2)
myImage(svd1$u[ ,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[ ,1:5]))
myImage(svd1$u[ ,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[ ,1:10]))
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, boolean = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1, 12)
names(sub1, n = 12)
names(sub1)[1:12]
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[, 1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd$v)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[ ,2])
mdist <- dist(sub1[, 10:12])
mdist <- dist(sub1[, c(10:12, maxCon])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclusst(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
laying <- which(kClust$size == 49)
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
p <- xyplot(Ozonz ~ Wind, data = airquality)
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamon$color)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color*cut, diamonds, strop = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color*cut, diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red, blue"))
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(a)
pal(1)
pal(seq(0, 1, len = 6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(mpg$displ, mpg$hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = boxplot)
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv, method = loess)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv, method = "loess")
g <- ggplo(mpg, aes(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
geom_smooth(g + geom_point())
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_po,t(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3, 3))
g <- ggplot(mpg, aes(x = displ, y = hway, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE)
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv ~ cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
qplot(diamonds$price, data = diamonds)
range(diamonds$range)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), methode = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm", facets = . ~ cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoint <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/DataScience/ReproducibleResearch/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
averageSteps
dailySteps
mean(dailySteps$totalSteps)
median(dailySteps$totalSteps)
summary(dailySteps$totalSteps)
(10770-10766.19)/10766.19
(10765-10760)/10760
((10765-10760)/10760)$100
((10765-10760)/10760)*100
activityNA <- filter(activity, steps == is.na(steps))
View(activityNA)
activityNA <- filter(activity, steps == NA)
View(activityNA)
View(activity)
activityNA <- filter(activity, steps == is.na(steps))
View(activityNA)
activityNA <- filter(activity, is.na(steps))
View(activityNA)
activityNA2 <- rbind(activityNA, activityClean)
View(activityNA2)
activityNA2 <- merge(activityNA, averageSteps, by = interval)
activityNA2 <- merge(activityNA, averageSteps, by.x = interval)
activityNA2 <- merge(activityNA, averageSteps, by = activityNA$interval)
activityNA2 <- merge(activityNA, averageSteps, by.x = activityNA$interval)
View(averageSteps)
activityNA2 <- merge(activityNA, averageSteps, by = "interval")
View(activityNA2)
?round
?as.integer
?replace
activityNA3 <- activityNA2 %>% mutate(steps = replace(steps, as.integer(avgSteps)))
activityNA3 <- activityNA2 %>% mutate(steps = replace(steps, steps, as.integer(avgSteps)))
activityNA3 <- activityNA2 %>% mutate(steps = replace(steps, which(steps = NA), as.integer(avgSteps)))
activityNA3 <- activityNA2 %>% mutate(steps = replace(steps, which(steps == NA), as.integer(avgSteps)))
View(activityNA3)
activityNA3 <- activityNA2 %>%
mutate(steps = replace(steps, is.na(steps), as.integer(avgSteps)))
View(activityNA3)
activityNA3 <- activityNA2 %>%
mutate(steps = replace(steps, is.na(steps), as.integer(avgSteps))) %>%
select(steps, date, interval) %>%
arrange(date)
View(activityNA3)
activityNA <- activityNA %>% merge(averageSteps, by = "interval")
activityNAFull <- activityNA %>%
mutate(steps = replace(steps, is.na(steps), as.integer(avgSteps))) %>%
select(steps, date, interval) %>%
arrange(date)
View(activityNAFull)
activityFull <- rbind(activityNAFull, activityClean)
View(activityFull)
sum(is.na(activityFull))
dailyStepsFull <- function() {
activityFull %>%
group_by(date) %>%
summarize(totalSteps = sum(steps))
}
print(dailyStepsFull)
ggplot(data = dailyStepsFull, aes(dailyStepsFull$totalSteps)) +
geom_histogram(binwidth = 1000) +
labs(x = "Total number of steps per day",
y = "Count",
title = "Total number of steps taken each day")
dailyStepsFull <- activityFull %>%
group_by(date) %>%
summarize(totalSteps = sum(steps))
print(dailyStepsFull)
ggplot(data = dailyStepsFull, aes(dailyStepsFull$totalSteps)) +
geom_histogram(binwidth = 1000) +
labs(x = "Total number of steps per day",
y = "Count",
title = "Total number of steps taken each day")
mean(dailyStepsFull$totalSteps)
median(dailyStepsFull$totalSteps)
(10766.19-10749.77)/10749.77
(10641-10765)/10765
ggplot(data = dailyStepsFull, aes(dailyStepsFull$date, dailyStepsFull$totalSteps)) +
geom_histogram(binwidth = 1000) +
labs(x = "Total number of steps per day",
y = "Count",
title = "Total number of steps taken each day")
activityFull <- rbind(activityNAFull, activityClean)
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull)
activityNAFull <- function() {
activityNA %>%
mutate(steps = replace(steps, is.na(steps), as.integer(avgSteps))) %>%
select(steps, date, interval) %>%
arrange(date)
}
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull)
activityNAFull <- activityNA %>%
mutate(steps = replace(steps, is.na(steps), as.integer(avgSteps))) %>%
select(steps, date, interval) %>%
arrange(date)
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull)
ggplot(data = dailyStepsFull, aes(dailyStepsFull$totalSteps)) +
geom_histogram(binwidth = 1000) +
labs(x = "Total number of steps per day",
y = "Count",
title = "Total number of steps taken each day after imputing missing values")
summary(dailyStepsFull)
?factor
weekMoment <- factor(weekdays(activityFull$date), levels = c("weekday", "weekend"))
head(weekMoment)
weekdays(activityFull$date)
unique(weekdays(activityFull$date))
weekDay <- weekdays(activityFull$date)
head(weekDay)
## Create a variable containing the weekday of the variable 'date' from our dataset
weekDay <- weekdays(activityFull$date)
## Generating two levels for the new variable
if (weekDay < Saturday) {
weekDay == "weekday"
} else {
weekday == "weekend"
}
## Coming up with the factor variable
weekMoment <- factor(weekDay, levels = c("weekday", "weekend"))
## Create a variable containing the weekday of the variable 'date' from our dataset
weekDay <- weekdays(activityFull$date)
## Generating two levels for the new variable
if (weekDay < "Saturday") {
weekDay == "weekday"
} else {
weekday == "weekend"
}
## Coming up with the factor variable
weekMoment <- factor(weekDay, levels = c("weekday", "weekend"))
activityFull %>%
mutate(weekDay = weekdays(activityFull$date)) %>%
## Generating two levels for the new variable
mutate(weekDay = replace(weekDay, which(weekDay < "Saturday"), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= "Saturday"), "weekend"))
activityFull <- activityFull %>%
mutate(weekDay = weekdays(activityFull$date)) %>%
## Generating two levels for the new variable
mutate(weekDay = replace(weekDay, which(weekDay < "Saturday"), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= "Saturday"), "weekend"))
View(activityFull)
unique(weekdays(activityFull$date))
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date))) %>%
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
View(activityFull)
activityFull$weekDay
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date))) %>%
ordered(levels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull, 10)
## Create a variable containing the weekday of the variable 'date' from our dataset
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
ordered(activityFull$weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < "Saturday", "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= "Saturday"), "weekend"))
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < "Saturday"), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= "Saturday"), "weekend"))
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < "Saturday"), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= "Saturday"), "weekend"))
View(activityFull)
class(activityFull$weekDay)
str(activityFull$weekDay)
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < 6), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= 6), "weekend"))
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
ordered(activityFull$weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday",
"Friday", "Saturday", "Sunday"))
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < 6), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= 6), "weekend"))
ordered(activityFull$weekday, levels = 1:7,
labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
str(activityFull$weekDay)
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay, which(weekDay < 6), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay >= 6), "weekend"))
View(activityFull)
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
ordered(activityFull$weekday, levels = 1:7,
labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
activityFull <- activityFull %>%
mutate(weekDay = replace(weekDay,
which(weekDay == c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday")), "weekday")) %>%
mutate(weekDay = replace(weekDay, which(weekDay == c("Saturday", "Sunday")), "weekend"))
activityFull <- activityFull %>%
mutate(weekDay = factor(weekdays(activityFull$date)))
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull, 10)
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
activityFull <- activityFull %>%
mutate(weekMoment = factor(weekdays(activityFull$date)), levels = ("weekday", "weekend"))
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
activityFull <- activityFull %>%
mutate(weekMoment = factor(weekdays(activityFull$date), levels = ("weekday", "weekend")))
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
activityFull <- activityFull %>%
mutate(weekMoment = factor(weekdays(activityFull$date), levels = c("weekday", "weekend")))
View(activityFull)
activityFull <- rbind(activityNAFull, activityClean)
head(activityFull, 10)
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
activityFull <- activityFull %>%
mutate(weekMoment = factor(weekdays(activityFull$date), levels = c(weekday, weekend)))
View(activityFull)
str(activityFull$weekMoment)
dateDay <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
activityFull <- activityFull %>%
mutate(weekMoment = factor(weekdays(activityFull$date) %in% dateDay,
levels = c(TRUE, FALSE),
labels = c("weekday", "weekend")))
View(activityFull)
filter(activityFull, weekMoment == "weekend")
ggplot(activityFull, aes(interval, steps)) +
geom_line() +
facet_grid(weekMoment ~ .) +
labs(x = "Interval",
y = "Number of steps",
title = "Number of steps per interval across weekdays and weekends")
weekSteps <- activityFull %>%
group_by(interval, weekMoment) %>%
summarize(avgWeekSteps = mean(steps))
print(weekSteps)
ggplot(weekSteps, aes(interval, steps)) +
geom_line() +
facet_grid(weekMoment ~ .) +
labs(x = "Interval",
y = "Number of steps",
title = "Number of steps per interval across weekdays and weekends")
ggplot(weekSteps, aes(interval, avgWeekSteps)) +
geom_line() +
facet_grid(weekMoment ~ .) +
labs(x = "Interval",
y = "Number of steps",
title = "Number of steps per interval across weekdays and weekends")
60*24
unique(activityFull$interval)
activity$interval <- strptime(temp, format="%H%M")
activity$interval <- strptime(activity$interval, format="%H%M")
View(activity)
activity <- read.csv(file.path(path, "activity.csv"))
activity$date <- as.Date(activity$date, "%Y-%m-%d")
sprintf("%04d", activity$interval)
View(activity)
addNb <- mapply(function(x, y) paste0(rep(x, y), collapse = ""), 0, 4 - nchar(activity$interval))
activity$interval <- paste0(addNb, activity$interval)
View(activity)
activity <- read.csv(file.path(path, "activity.csv"))
addNb <- mapply(function(x, y) paste0(rep(x, y), collapse = ""), 0, 4 - nchar(activity$interval))
activity$interval <- paste0(addNb, activity$interval)
View(activity)
activity$interval <- gsub('^(.{2})(.*)$', '\\1\:\\2', activity$interval)
activity$interval <- gsub('^(.{2})(.*)$', '\\1:\\2', activity$interval)
View(activity)
class(activity$interval)
activityNA <- activityNA %>% merge(averageSteps, by = "interval")
View(activityNA)
source('~/.active-rstudio-document', echo=TRUE)
View(activity)
source('~/.active-rstudio-document', echo=TRUE)
View(activity)
source('~/.active-rstudio-document', echo=TRUE)
View(activityNA)
View(activityFull)
source('~/.active-rstudio-document', echo=TRUE)
knit2html()
knit2html()
knit2html?
?knit2html
knit2html(PA1_template.Rmd)
